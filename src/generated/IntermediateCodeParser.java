
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package generated;

import java_cup.runtime.*;
import generation_schemes.AssemblyGenerator;
import generation_schemes.Quadruple;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class IntermediateCodeParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public IntermediateCodeParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public IntermediateCodeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public IntermediateCodeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\003\004\000\002\003" +
    "\002\000\002\002\004\000\002\002\004\000\002\005\004" +
    "\000\002\005\005\000\002\006\007\000\002\006\005\000" +
    "\002\006\006\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\022\002\uffff\035\004\037\012\040\017\041" +
    "\010\042\006\043\016\050\014\001\002\000\004\050\uffe4" +
    "\001\002\000\004\017\065\001\002\000\004\050\uffe0\001" +
    "\002\000\004\017\064\001\002\000\004\050\uffe1\001\002" +
    "\000\004\002\063\001\002\000\004\050\uffe3\001\002\000" +
    "\022\002\uffff\035\004\037\012\040\017\041\010\042\006" +
    "\043\016\050\014\001\002\000\004\013\023\001\002\000" +
    "\004\050\022\001\002\000\014\035\004\037\012\040\017" +
    "\041\010\042\006\001\002\000\004\050\uffe2\001\002\000" +
    "\004\050\021\001\002\000\004\017\ufffb\001\002\000\004" +
    "\017\ufffc\001\002\000\020\025\025\050\031\051\027\052" +
    "\030\053\033\054\026\055\024\001\002\000\052\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\017\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde\001" +
    "\002\000\016\050\031\051\027\052\030\053\033\054\026" +
    "\055\024\001\002\000\052\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf" +
    "\017\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\032\uffdf\033\uffdf\034\uffdf\001\002\000\052\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\017\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\001" +
    "\002\000\052\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc" +
    "\033\uffdc\034\uffdc\001\002\000\052\004\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda" +
    "\015\uffda\017\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\034\uffda\001\002\000\052" +
    "\004\034\005\037\006\053\007\050\010\047\011\043\012" +
    "\035\013\054\014\046\015\052\017\ufff9\024\036\025\041" +
    "\026\040\027\051\030\044\031\042\032\057\033\045\034" +
    "\055\001\002\000\052\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\017" +
    "\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\034\uffdb\001\002\000\016\050\ufff7\051" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\001\002\000\016" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\001" +
    "\002\000\016\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\001\002\000\016\050\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\055\ufff6\001\002\000\016\050\uffeb\051\uffeb" +
    "\052\uffeb\053\uffeb\054\uffeb\055\uffeb\001\002\000\016\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\001\002" +
    "\000\016\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\001\002\000\016\050\ufff2\051\ufff2\052\ufff2\053\ufff2" +
    "\054\ufff2\055\ufff2\001\002\000\016\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\055\uffe9\001\002\000\016\050\uffe6" +
    "\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\001\002\000" +
    "\016\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef" +
    "\001\002\000\016\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054" +
    "\ufff3\055\ufff3\001\002\000\016\050\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\001\002\000\016\050\uffea\051" +
    "\uffea\052\uffea\053\uffea\054\uffea\055\uffea\001\002\000\016" +
    "\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\001" +
    "\002\000\016\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5" +
    "\055\ufff5\001\002\000\016\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\001\002\000\016\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\001\002\000\016\050" +
    "\031\051\027\052\030\053\033\054\026\055\024\001\002" +
    "\000\016\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055" +
    "\uffe7\001\002\000\004\017\ufffa\001\002\000\004\017\ufff8" +
    "\001\002\000\004\002\000\001\002\000\004\002\001\001" +
    "\002\000\022\002\ufffe\035\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\050\ufffe\001\002\000\022\002\ufffd\035" +
    "\ufffd\037\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\050\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\063\000\014\002\012\003\010\005\006\006\004\010" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\002\012\003\061\005\006" +
    "\006\004\010\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\031\001\001\000\002\001\001\000\004\011\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\057\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$IntermediateCodeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$IntermediateCodeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$IntermediateCodeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    AssemblyGenerator assemblyGenerator = new AssemblyGenerator();

    public String getAssemblyCode() {
        return assemblyGenerator.toString();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$IntermediateCodeParser$actions {
  private final IntermediateCodeParser parser;

  /** Constructor */
  CUP$IntermediateCodeParser$actions(IntermediateCodeParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$IntermediateCodeParser$do_action_part00000000(
    int                        CUP$IntermediateCodeParser$act_num,
    java_cup.runtime.lr_parser CUP$IntermediateCodeParser$parser,
    java.util.Stack            CUP$IntermediateCodeParser$stack,
    int                        CUP$IntermediateCodeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$IntermediateCodeParser$result;

      /* select the action based on the action number */
      switch (CUP$IntermediateCodeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= statements EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).value;
		RESULT = start_val;
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$IntermediateCodeParser$parser.done_parsing();
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // statements ::= statement statements 
            {
              Object RESULT =null;

              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= 
            {
              Object RESULT =null;
		 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= declaration SEMICOLON 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).value;
		 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= assignment SEMICOLON 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).value;
		 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("statement",0, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= data_type IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		
                assemblyGenerator.addDeclaration(t.toString(), i.toString());
            
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= CONST data_type IDENTIFIER 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		
                assemblyGenerator.addDeclaration(t.toString(), i.toString());
            
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("declaration",3, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // assignment ::= IDENTIFIER ASSIGN value operand value 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-4)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-2)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		
                assemblyGenerator.addAssignment(i.toString(), op.toString(), v1.toString(), v2.toString());
            
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("assignment",4, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-4)), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assignment ::= IDENTIFIER ASSIGN value 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		
                assemblyGenerator.addAssignment(i.toString(), null, v.toString(), null);
            
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("assignment",4, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-2)), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // assignment ::= IDENTIFIER ASSIGN NOT value 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-3)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		
                assemblyGenerator.addAssignment(i.toString(), op.toString(), v.toString(), null);
            
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("assignment",4, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.elementAt(CUP$IntermediateCodeParser$top-3)), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // operand ::= TIMES 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // operand ::= PLUS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operand ::= MINUS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operand ::= DIV 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operand ::= IDIV 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operand ::= POW 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operand ::= MOD 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operand ::= ASSIGN 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operand ::= INC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operand ::= DEC 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // operand ::= AND 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operand ::= NOT 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operand ::= OR 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operand ::= LESS_THAN 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operand ::= MORE_THAN 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operand ::= LESS_OR_EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operand ::= MORE_OR_EQ 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operand ::= EQUALS 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operand ::= DIFFERENT_THAN 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = op.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("operand",5, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // data_type ::= INT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = t; 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("data_type",6, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // data_type ::= DOUBLE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = t; 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("data_type",6, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // data_type ::= CHAR 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = t; 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("data_type",6, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // data_type ::= STRING 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = t; 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("data_type",6, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // data_type ::= BOOL 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = t; 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("data_type",6, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // value ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT =  v.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value ::= DECIMAL_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT =  v.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT =  v.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value ::= CHAR_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT =  v.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // value ::= STRING_LITERAL 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT =   v.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // value ::= IDENTIFIER 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$IntermediateCodeParser$stack.peek()).value;
		 RESULT = v.toString(); 
              CUP$IntermediateCodeParser$result = parser.getSymbolFactory().newSymbol("value",7, ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$IntermediateCodeParser$stack.peek()), RESULT);
            }
          return CUP$IntermediateCodeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$IntermediateCodeParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$IntermediateCodeParser$do_action(
    int                        CUP$IntermediateCodeParser$act_num,
    java_cup.runtime.lr_parser CUP$IntermediateCodeParser$parser,
    java.util.Stack            CUP$IntermediateCodeParser$stack,
    int                        CUP$IntermediateCodeParser$top)
    throws java.lang.Exception
    {
              return CUP$IntermediateCodeParser$do_action_part00000000(
                               CUP$IntermediateCodeParser$act_num,
                               CUP$IntermediateCodeParser$parser,
                               CUP$IntermediateCodeParser$stack,
                               CUP$IntermediateCodeParser$top);
    }
}

}
